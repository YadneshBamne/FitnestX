import 'package:flutter/material.dart';
import 'package:fitness/common/colo_extension.dart';
import 'package:fitness/common_widget/round_button.dart';

class ChallengeCreatePage extends StatefulWidget {
  const ChallengeCreatePage({super.key});

  @override
  State<ChallengeCreatePage> createState() => _ChallengeCreatePageState();
}

class _ChallengeCreatePageState extends State<ChallengeCreatePage> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _targetController = TextEditingController();
  
  int _duration = 7;
  String _selectedCategory = 'Strength';
  String _selectedDifficulty = 'Beginner';
  String _selectedIcon = 'assets/img/Workout1.png';
  bool _isPublic = false;
  bool _enableReminders = true;
  TimeOfDay _reminderTime = const TimeOfDay(hour: 9, minute: 0);

  final List<String> _categories = [
    'Strength', 'Cardio', 'Flexibility', 'Endurance', 'Weight Loss', 
    'Muscle Building', 'Yoga', 'Running', 'Walking', 'Custom'
  ];

  final List<String> _difficulties = ['Beginner', 'Intermediate', 'Advanced'];

  final List<Map<String, String>> _challengeIcons = [
    {'name': 'Strength Training', 'icon': 'assets/img/Workout1.png'},
    {'name': 'Cardio', 'icon': 'assets/img/Workout2.png'},
    {'name': 'Yoga', 'icon': 'assets/img/Workout3.png'},
    {'name': 'Running', 'icon': 'assets/img/Workout4.png'},
    {'name': 'Flexibility', 'icon': 'assets/img/Workout5.png'},
    {'name': 'General', 'icon': 'assets/img/Workout6.png'},
  ];

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    _targetController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: TColor.white,
      appBar: AppBar(
        backgroundColor: TColor.white,
        elevation: 0,
        iconTheme: IconThemeData(color: TColor.black),
        title: Text(
          "Create Challenge",
          style: TextStyle(
            color: TColor.black, 
            fontWeight: FontWeight.w700,
            fontSize: 18,
          ),
        ),
        centerTitle: true,
        actions: [
          TextButton(
            onPressed: () => _showPreview(),
            child: Text(
              'Preview',
              style: TextStyle(
                color: TColor.primaryColor1,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
      body: SafeArea(
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Challenge Icon Selection
                      _buildSectionTitle("Choose Icon"),
                      const SizedBox(height: 12),
                      _buildIconSelector(),
                      const SizedBox(height: 24),

                      // Challenge Name
                      _buildSectionTitle("Challenge Name"),
                      const SizedBox(height: 8),
                      _buildNameField(),
                      const SizedBox(height: 20),

                      // Challenge Description
                      _buildSectionTitle("Description (Optional)"),
                      const SizedBox(height: 8),
                      _buildDescriptionField(),
                      const SizedBox(height: 20),

                      // Category and Difficulty
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                _buildSectionTitle("Category"),
                                const SizedBox(height: 8),
                                _buildCategoryDropdown(),
                              ],
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                _buildSectionTitle("Difficulty"),
                                const SizedBox(height: 8),
                                _buildDifficultyDropdown(),
                              ],
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 20),

                      // Target and Duration
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                _buildSectionTitle("Daily Target"),
                                const SizedBox(height: 8),
                                _buildTargetField(),
                              ],
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                _buildSectionTitle("Duration (Days)"),
                                const SizedBox(height: 8),
                                _buildDurationDropdown(),
                              ],
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 24),

                      // Settings Section
                      _buildSectionTitle("Settings"),
                      const SizedBox(height: 12),
                      _buildSettingsCard(),
                      const SizedBox(height: 100), // Space for button
                    ],
                  ),
                ),
              ),
              
              // Create Button
              Container(
                padding: const EdgeInsets.all(24),
                decoration: BoxDecoration(
                  color: TColor.white,
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.05),
                      blurRadius: 10,
                      offset: const Offset(0, -5),
                    ),
                  ],
                ),
                child: SafeArea(
                  top: false,
                  child: RoundButton(
                    title: "Create Challenge",
                    type: RoundButtonType.bgGradient,
                    onPressed: _createChallenge,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: TextStyle(
        fontSize: 16,
        fontWeight: FontWeight.w700,
        color: TColor.black,
      ),
    );
  }

  Widget _buildIconSelector() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: TColor.lightGray,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          GridView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 3,
              crossAxisSpacing: 12,
              mainAxisSpacing: 12,
              childAspectRatio: 1,
            ),
            itemCount: _challengeIcons.length,
            itemBuilder: (context, index) {
              final icon = _challengeIcons[index];
              final isSelected = _selectedIcon == icon['icon'];
              
              return GestureDetector(
                onTap: () => setState(() => _selectedIcon = icon['icon']!),
                child: Container(
                  decoration: BoxDecoration(
                    color: isSelected ? TColor.primaryColor1.withOpacity(0.1) : TColor.white,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: isSelected ? TColor.primaryColor1 : TColor.gray.withOpacity(0.3),
                      width: 2,
                    ),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Container(
                        width: 40,
                        height: 40,
                        decoration: BoxDecoration(
                          color: isSelected ? TColor.primaryColor1 : TColor.gray,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Icon(
                          Icons.fitness_center,
                          color: TColor.white,
                          size: 24,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        icon['name']!,
                        style: TextStyle(
                          fontSize: 10,
                          fontWeight: FontWeight.w500,
                          color: isSelected ? TColor.primaryColor1 : TColor.gray,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildNameField() {
    return TextFormField(
      controller: _nameController,
      decoration: InputDecoration(
        hintText: "e.g., 30 Push-ups Daily",
        prefixIcon: Icon(Icons.edit, color: TColor.gray),
        filled: true,
        fillColor: TColor.lightGray,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: TColor.primaryColor1, width: 2),
        ),
      ),
      validator: (value) =>
          value == null || value.trim().isEmpty ? "Please enter a challenge name" : null,
    );
  }

  Widget _buildDescriptionField() {
    return TextFormField(
      controller: _descriptionController,
      maxLines: 3,
      decoration: InputDecoration(
        hintText: "Describe your challenge goals and motivation...",
        prefixIcon: Icon(Icons.description, color: TColor.gray),
        filled: true,
        fillColor: TColor.lightGray,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: TColor.primaryColor1, width: 2),
        ),
      ),
    );
  }

  Widget _buildCategoryDropdown() {
    return DropdownButtonFormField<String>(
      value: _selectedCategory,
      decoration: InputDecoration(
        prefixIcon: Icon(Icons.category, color: TColor.gray),
        filled: true,
        fillColor: TColor.lightGray,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
      ),
      items: _categories.map((category) => 
        DropdownMenuItem(value: category, child: Text(category))
      ).toList(),
      onChanged: (value) => setState(() => _selectedCategory = value!),
    );
  }

  Widget _buildDifficultyDropdown() {
    return DropdownButtonFormField<String>(
      value: _selectedDifficulty,
      decoration: InputDecoration(
        prefixIcon: Icon(Icons.trending_up, color: TColor.gray),
        filled: true,
        fillColor: TColor.lightGray,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
      ),
      items: _difficulties.map((difficulty) => 
        DropdownMenuItem(value: difficulty, child: Text(difficulty))
      ).toList(),
      onChanged: (value) => setState(() => _selectedDifficulty = value!),
    );
  }

  Widget _buildTargetField() {
    return TextFormField(
      controller: _targetController,
      keyboardType: TextInputType.number,
      decoration: InputDecoration(
        hintText: "e.g., 30",
        prefixIcon: Icon(Icons.tag_faces_rounded, color: TColor.gray),
        filled: true,
        fillColor: TColor.lightGray,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: TColor.primaryColor1, width: 2),
        ),
      ),
      validator: (value) =>
          value == null || value.trim().isEmpty ? "Please enter a target" : null,
    );
  }

  Widget _buildDurationDropdown() {
    return DropdownButtonFormField<int>(
      value: _duration,
      decoration: InputDecoration(
        prefixIcon: Icon(Icons.calendar_today, color: TColor.gray),
        filled: true,
        fillColor: TColor.lightGray,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
      ),
      items: [7, 14, 21, 30, 60, 90].map((duration) => 
        DropdownMenuItem(value: duration, child: Text("$duration Days"))
      ).toList(),
      onChanged: (value) => setState(() => _duration = value!),
    );
  }

  Widget _buildSettingsCard() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: TColor.lightGray,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          _buildSwitchTile(
            title: "Enable Reminders",
            subtitle: "Get daily notifications",
            value: _enableReminders,
            onChanged: (value) => setState(() => _enableReminders = value),
            icon: Icons.notifications,
          ),
          if (_enableReminders) ...[
            const SizedBox(height: 12),
            ListTile(
              leading: Icon(Icons.access_time, color: TColor.gray),
              title: Text("Reminder Time"),
              subtitle: Text(_reminderTime.format(context)),
              trailing: Icon(Icons.chevron_right, color: TColor.gray),
              onTap: _selectReminderTime,
            ),
          ],
          const SizedBox(height: 12),
          _buildSwitchTile(
            title: "Make Public",
            subtitle: "Share with the community",
            value: _isPublic,
            onChanged: (value) => setState(() => _isPublic = value),
            icon: Icons.public,
          ),
        ],
      ),
    );
  }

  Widget _buildSwitchTile({
    required String title,
    required String subtitle,
    required bool value,
    required ValueChanged<bool> onChanged,
    required IconData icon,
  }) {
    return Row(
      children: [
        Icon(icon, color: TColor.gray),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: TextStyle(
                  fontWeight: FontWeight.w600,
                  color: TColor.black,
                ),
              ),
              Text(
                subtitle,
                style: TextStyle(
                  fontSize: 12,
                  color: TColor.gray,
                ),
              ),
            ],
          ),
        ),
        Switch(
          value: value,
          onChanged: onChanged,
          activeColor: TColor.primaryColor1,
        ),
      ],
    );
  }

  void _selectReminderTime() async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _reminderTime,
    );
    if (picked != null) {
      setState(() => _reminderTime = picked);
    }
  }

  void _showPreview() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => _buildPreviewSheet(),
    );
  }

  Widget _buildPreviewSheet() {
    return Container(
      height: MediaQuery.of(context).size.height * 0.7,
      decoration: BoxDecoration(
        color: TColor.white,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        children: [
          Container(
            width: 40,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 12),
            decoration: BoxDecoration(
              color: TColor.gray.withOpacity(0.3),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  "Challenge Preview",
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.w700,
                    color: TColor.black,
                  ),
                ),
                const SizedBox(height: 20),
                // Preview card would go here
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: TColor.primaryG,
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        _nameController.text.isEmpty ? "Your Challenge Name" : _nameController.text,
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 18,
                          fontWeight: FontWeight.w700,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        "$_selectedCategory • $_selectedDifficulty • $_duration Days",
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.9),
                          fontSize: 14,
                        ),
                      ),
                      if (_descriptionController.text.isNotEmpty) ...[
                        const SizedBox(height: 12),
                        Text(
                          _descriptionController.text,
                          style: TextStyle(
                            color: Colors.white.withOpacity(0.8),
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _createChallenge() {
    if (_formKey.currentState!.validate()) {
      final newChallenge = {
        "name": _nameController.text.trim(),
        "description": _descriptionController.text.trim(),
        "category": _selectedCategory,
        "difficulty": _selectedDifficulty,
        "target": _targetController.text.trim(),
        "image": _selectedIcon,
        "progress": 0.0,
        "duration": _duration,
        "startDate": DateTime.now(),
        "streak": 0,
        "lastCheckIn": null,
        "isPublic": _isPublic,
        "enableReminders": _enableReminders,
        "reminderTime": _enableReminders ? _reminderTime : null,
        "completedDays": 0,
        "totalDays": _duration,
      };
      
      Navigator.pop(context, newChallenge);
      
      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Challenge '${_nameController.text}' created successfully!"),
          backgroundColor: TColor.primaryColor1,
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }
}